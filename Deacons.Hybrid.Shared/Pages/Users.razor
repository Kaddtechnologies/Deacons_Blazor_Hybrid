@page "/users"
@using Deacons.Hybrid.Shared.Utility
@using MudBlazor
@inject HttpClient _httpClient
@inject IUsersService userService
@inject IDialogService _dialogService
@inject NavigationManager _navigator
@inject ISnackbar _snackbar

<MudItem xs="12" Class="page-wrapper">
    <MudItem xs="12" Class="header-wrapper"></MudItem>
    <MudItem xs="12" Class="header mx-5 d-flex flex-column flex-md-row">
        <MudItem Class="d-flex justify-center" Style="width: fit-content">
            <MudAvatar Elevation="0" Class="avatar">
                @if (!string.IsNullOrEmpty(ProfileUser.AvatarUrl))
                {
                    <MudImage Src="@(ProfileUser.AvatarUrl?? imgSrc)" Class="avatar-image"></MudImage>
                }
                else
                {
                    <MudImage Src = "@(imgSrc)" Class = "avatar-image" ></MudImage >
                }
            </MudAvatar>
            <MudItem Class="profile-info d-flex justify-center flex-column" Style="width: fit-content">
                <MudItem Class="name">
                    @{
                        var name = ProfileUser.FirstName  + " " + ProfileUser.LastName;
                        <MudText>@(name ?? "")</MudText> 
                    }
                </MudItem>
                <MudItem Class="title">
                    <MudText>@(ProfileUser.DeaconTitle ?? "")</MudText>
                </MudItem>
                <MudItem Class="edit-profile">
                    @if (string.IsNullOrEmpty(ProfileUser.UserId.ToString()))
                    {
                        <MudButton IconClass="edit-icon" OnClick=@(() => _navigator.NavigateTo($"edit/{UsersList.FirstOrDefault().UserId.ToString()}") ) DisableElevation StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled"><MudText>Edit Profile</MudText></MudButton>
                    }
                </MudItem>
            </MudItem>
        </MudItem>
        <MudItem Class="d-md-flex d-none justify-center flex-column ml-6" Style="width: fit-content">
            <MudDivider Vertical Style="height: 62%;color: darkgray;"></MudDivider>
        </MudItem>
        <MudItem Class="profile-contact d-flex flex-column flex-sm-row align-self-start gap-4 gap-sm-6 pt-6 pt-sm-5 pb-2 pb-sm-1 pt-md-0 pb-md-0 my-auto">
            @if (!string.IsNullOrEmpty(ProfileUser.City) || !string.IsNullOrEmpty(ProfileUser.State))
            {
                <MudItem Class="d-flex my-auto location">
                    <MudIcon Icon="@Icons.Material.Filled.LocationOn"></MudIcon>
                    <MudText>@ProfileUser.City@((!string.IsNullOrEmpty(ProfileUser.City) && !string.IsNullOrEmpty(ProfileUser.State)) ? ", " : "") @ProfileUser.State</MudText>
                </MudItem>
            }
            @if (!string.IsNullOrEmpty(ProfileUser.PhoneNumber))
            {
                <MudItem Class="d-flex my-auto phone">
                    <MudIcon Icon="@Icons.Material.Filled.Call"></MudIcon>
                    <MudText>@ProfileUser.PhoneNumber</MudText>
                </MudItem>
            }
            @if (!string.IsNullOrEmpty(ProfileUser.Email))
            {
                <MudItem Class="d-flex my-auto email">
                    <MudIcon Icon="@Icons.Material.Filled.Email"></MudIcon>
                    <MudText>@ProfileUser.Email</MudText>
                </MudItem>  
            }
        </MudItem>
    </MudItem>
    <MudItem Class="tabs pt-sm-5 d-flex" xs="12">
        @foreach(var item in DeaconTitles)
        {
            <MudItem Class="tab d-flex" Style="background: white;cursor: pointer" @onclick=@(() => Filter(item))>
                <MudItem Class="tab-icon">
                    @if (item == "Administrator")
                    {
                        <MudImage Src="images/protection.png"></MudImage>
                    }
                    else if (item == "Deacon")
                    {
                        <MudImage Src="images/team.png"></MudImage>
                    }
                    else if (item == "D.I.T")
                    {
                        <MudImage Src="images/group.png"></MudImage>
                    }
                  
                    else if (item == "Yokefellow")
                    {
                    <MudImage Src="images/human-resources.png"></MudImage>
                    }
                    else if(item == "All")
                    {
                        <MudImage Src="images/all.png"></MudImage>
                    }
                </MudItem>
                <MudItem Class="tab-details d-flex flex-column justify-center">
                    <MudText>@item</MudText>
                    @if(item == "All")
                    {
                        <MudText>@UsersList.Count()</MudText>
                    }
                    else
                    {
                        <MudText>Count: @(UsersList.Where(x => x.DeaconTitle == item).Count())</MudText>
                    }
                </MudItem>
            </MudItem>
        }
    </MudItem>
    <MudItem Class="headline">
        <MudText>Roster</MudText>
    </MudItem>
    <MudItem Class="users-table mx-5 pb-8">
        <MudTable @bind-SelectedItem="ProfileUser" Elevation="0" RowsPerPage="10" Dense=true Items="@SelectedUsers" HeaderClass="table-header" Breakpoint="Breakpoint.Sm" Striped="true"
                  CustomHeader="true" CustomFooter="true">
            <HeaderContent>
                <MudTHeadRow>
                    <MudTh>First Name</MudTh>
                    <MudTh>Last Name</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Phone Number</MudTh>
                    <MudTh>Last Login date</MudTh>
                    <MudTh Style="text-align:center">Action</MudTh>
                </MudTHeadRow>
            </HeaderContent>
            <RowTemplate>
                <MudTd Class="pt-md-2 pt-4" DataLabel="First Name">@(context.FirstName ?? "")</MudTd>
                <MudTd DataLabel="Last Name">@(context.LastName ?? "")</MudTd>
                <MudTd DataLabel="Email">@(context.Email ?? "")</MudTd>
                <MudTd DataLabel="Phone Number">@(context.PhoneNumber ?? "")</MudTd>
                <MudTd DataLabel="Last Login Date">
                    @(context.LastLoginDate is not null ? context.LastLoginDate.Value.ToString("dd MMMM, yyyy") : "-")
                </MudTd>
                <MudTd Class="action-button-class pb-3 pb-md-2">
                    <MudItem Class="action-buttons" Style="width: fit-content;margin: auto;">
                        <MudButton OnClick="@(() => _navigator.NavigateTo($"/edit/{UsersList.FirstOrDefault().UserId.ToString()}"))" DisableElevation Variant=Variant.Outlined><MudText>Edit</MudText></MudButton>
                        <MudButton DisableElevation OnClick=@(async () => await DeleteUser(context)) Variant="Variant.Outlined"><MudText>Delete</MudText></MudButton>
                    </MudItem>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager HorizontalAlignment=HorizontalAlignment.Right HideRowsPerPage=true />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudItem>


<style>
    .page-wrapper{
        background: #e7f5fd;
        min-height: 100vh;
    }

    .header-wrapper {
        background: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        height: 140px;
        position: relative;
        top: 0px;
    }

    .header {
        padding: 16px 0;
        background: #fefefe;
        border-radius: 8px;
        margin-top: -96px;
        z-index: 1;
        position: relative;
    }

    .avatar{
        border-radius: 5rem;
        width: 100px !important;
        height: 100px !important;
        margin: auto 20px;
        border: white 5px solid;
        background-color: hsl(44.7, 98.4%, 50%);
    }

    .avatar-image{
        object-fit: contain !important;
    }

    .name p{
        font-size: 18px;
        font-weight: 600;
    }

    .title p{
        font-size: 16px;
        color: darkgray;
    } 

    .edit-profile button, .action-buttons button:hover{
        border-radius: 20px;
        padding: 7px 20px;
        background: #01afd6 !important;
    }

    .action-buttons button{
        border-radius: 20px;
        padding: 7px 20px;
        background: white !important;
    }
    
    .edit-profile button{
        margin-top: 8px;
    }

    .edit-profile p, .action-buttons button:hover p{
        font-size: 14px;
        color: white;
    }

    .action-buttons p {
        color: #01afd6;
        font-size: 14px;
    }


    .edit-icon{
        color: white;
    }

    .edit-icon .mud-icon-root.mud-svg-icon {
        fill:white;
    }

    .profile-contact{
        margin-left: 24px;
    }

    .profile-contact p{
        padding: 0 8px;
    }

    .profile-contact .mud-icon-root.mud-svg-icon {
        fill: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
    }

    .tabs {
        overflow-x: scroll;
        margin-right: 20px;
        -ms-overflow-style: none;
        scrollbar-width: none;
        padding-top: 18px;
    }

    .tabs::-webkit-scrollbar {
        display: none;
    }

    .tab{
        border-radius: 10px;
        margin: 10px 0px 10px 20px;
        padding: 14px 0px;
        max-width: 260px;
        min-width: 215px;
        width: 30vw;
    }

    .tab p{
        font-weight: 600;
    }

    .tab-details{
        margin: 10px 0px 10px 16px;
    }

    .tab-icon{
        margin: auto 0px auto 20px;
        border-radius: 8px;
        padding: 8px 0px 8px 8px;
        color: white;
    }

    .tab-icon img {
        width: 36px;
        margin-top: 3px;
    }

    .headline{
        background: white;
        margin: 16px 20px;
        border-radius: 8px;
        border: 2px solid #f0f0f0 ;
    }

    .headline p{
        padding: 16px 12px;
        font-size: 24px;
    }

    .action-button-class{
        width: auto;
    }

    .users-table tbody .mud-table-row:nth-of-type(2n) {
        background-color: #f2fdff;
    }
    
    .users-table tbody .mud-table-row:nth-of-type(2n+1) {
        background-color: white !important;
    }

    .users-table .mud-button-outlined {
        border: 2px solid #01afd6;
    }

    .table-header tr{
        background-color: #f2fdff !important;
    }

    th{
        padding: 18px !important
    }

    .mud-table-dense * .mud-table-row .mud-table-cell {
        padding: 8px 24px 8px 16px;
    }

    .mud-table-cell{
        border-bottom: 2px solid #edf1f4;
    }

    .mud-table-container {
        border: 2px solid #edf1f4;
        border-radius: 8px 8px 0 0;
        border-bottom: 0;
    }

    .mud-table{
        border-radius: 8px;
    }

    .mud-table-pagination-toolbar {
        border: 2px solid #edf1f4 !important;
        padding: 28px;
    }

</style>


@code{
    User ProfileUser { get; set; } = new();
    List<User> UsersList { get; set; } = new();
    List<User> SelectedUsers { get; set; } = new();
    List<string> DeaconTitles { get; set; } = new();
    public string imgSrc = "https://pottershousedeacons.blob.core.windows.net/imagescontainer/avatars/default_avatar.jpg";

    protected override async Task OnInitializedAsync(){
        var response = await _httpClient.GetAsync("api/Users/GetAllUsers");
        if (response.IsSuccessStatusCode)
        {
            UsersList = (List<User>)await userService.GetAllUsers();
            ProfileUser = UsersList.FirstOrDefault();
            SelectedUsers = UsersList.ToList();
            DeaconTitles.AddRange(new []{ "Yokefellow", "Deacon", "D.I.T", "Administrator", "All"});
        }
    }

    private void Filter(string title)
    {
        if(title == "All")
        {
            SelectedUsers = UsersList.ToList();
        }
        else
        {
            SelectedUsers = UsersList.Where(x => x.DeaconTitle == title).ToList();
        }
    }

    private async Task DeleteUser(User user)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, $"Do you really want to delete {user.FirstName} {user.LastName}? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new MudBlazor.DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await _dialogService.ShowAsync<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            user.IsActive = "False";
            var response = await userService.DisableUser(user);
            UsersList.Remove(user);
            SelectedUsers.Remove(user);
            if (ProfileUser.UserId == user.UserId)
            {
                ProfileUser = SelectedUsers.FirstOrDefault();
            }
            _snackbar.Add($"User is deleted successfully", Severity.Success);
        }
    }
}
